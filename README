##############################################################################
# Implementation
##############################################################################

- Building a command.

The command syntasis:
zcli [object] [action] [ids list] [ids_params list] [file_upload|download] [param_body list|json]
         |       |       |                 |               |                      |
         |       |       ---------------------------------------------------------------> They are arguments
         -------------------------------------------------------------------------------> Defines the command

object: it is the element is going to be selected
action: it is the verb is going to be executed
ids list: they are the identifiers that refer to the object. It is used to make the URI. If the object is really a subobject (f.e. service) the previous keys are mandatories (f.e. farmname)
ids_params list: they are ids mandatories that cannot be parsed from id tree. It is used to make the URI. Example: Number of lines to show in a log
file_upload and file_download: it is a local file to upload/download to/from.
param_body: They are the json parameters that are sent in the ZAPI request. The parameter name is indicated using the format -name followed by the value (-vip 192.168.100.144).
             This field can use a json from a file and send it.

Example:
zcli [        object        ] [action] [       ids list        ] [ids_params list] [file_upload|download] [ param_body list   ]
zcli  farms-services-backend   modify   farm1 service1 backend1                                            -ip 1.1.1.1 -port 80


The help command can be used to get the command line expected for a command (object+action)
F.E.: ?????



- Defining Objects.

The objects used to implement a feature of ZCLI are defined in the directory src/ZCLI/Objects.
Each object follow a format and can contain a list of possible parameters to define how implement the ZAPI request

# Module key used in zcli commands
'module' => {

	# action key used in zcli commands. There are reserved words in Define.pm module to be used here.
	'action' => {

		# 'uri' is the URI used for the ZAPI request. It can contain two kind of 'parameters' inside:
		#    '<id>' is a id parameter of the command and has to match with one element of the IDs tree of the load balancer.
		#		Those parameters are delemited for the characeters '<' and '>'
		#    '$Define::Uri_param_tag' is a id_param parameter of the command and it is not implemented in the IDs tree of the load balancer.
		#       The name for this value is in the key of this hash 'param_uri'.
		#       The string that defines this parameters is defined in the Define module of ZCLI.
		uri       => "/system/logs/<$K{LOG}>/lines/$Define::Uri_param_tag",

		# 'method' is the HTTP method used to do the ZAPI request.
		method       => 'PUT',

		# 'content_type' is the content_type header used to send the request parameters in PUT and POST requests.
		#       If this parameter is missing, the 'application/json' value will be used.
		content_type => 'application/gzip',

		# 'upload_file' is a flag to invoke the autocomplete subrutine and to require to upload a local file. It has the 'undef' value.
		upload_file  => undef,

		# 'download_file' is a flag to invoke the autocomplete subrutine and to require to upload a local file. It has the 'undef' value.
		download_file => undef,

		# 'param_uri' is the parameter name for 'ids_params'. This list is sort. Each element contains a 'name' and a 'desc' (description) field
		param_uri    => [
			{
				name => "name",
				desc => "the name which the backup will be saved",
			},
		],
		# 'params' is a hash with pre-defined parameters. They are useful to create macros of command that does not need to modify
		#      its values as 'restart', 'stop'... Each element of this hash uses as key the parameter name and as value the value name.
		params => {
			'action' => 'stop',
		}
		
		# The option 'enterprise' is set to '1' when that call is exclusive of EE
		enterprise => 1,
		
		# 'params_autocomplete' defines how to autocomplete a parameter
		params_autocomplete => {
				name =>		# name of the parameter to autocomplete
					'ipds/blacklists',	# it is the information to look for the IDs to autocomplete. The keys of the id tree is separated by '/'.
		}
	}
}

Note: In the ZCLI module Defines.pm there are some macros to implement verbs and keys for the URIs



Examples:

'farms-services' => {
	$V{ CREATE } => {
					  uri    => "/farms/<$K{FARM}>/services",
					  method => 'POST',
	},
	$V{ SET } => {
				   uri    => "/farms/<$K{FARM}>/services/<$K{SRV}>",
				   method => 'PUT',
	},
},

'farms' => $V{ STOP } => {
					 uri    => "/farms/<$K{FARM}>/actions",
					 method => 'PUT',
					 params => {
								 'action' => 'stop',
					 },
	 },
},

'system-backups' => {
	  $V{ DOWNLOAD } => {
						  uri    => "/system/backup/<$K{BACKUP}>",
						  method => 'GET',
						  download_file => undef,
	  },
	  $V{ UPLOAD } => {
			  uri          => "/system/backup/$Define::Uri_param_tag",
			  method       => 'PUT',
			  content_type => 'application/gzip',
			  upload_file  => undef,
			  param_uri    => [
					{
						name => "name",
						desc => "the name which the backup will be saved",
					},
			  ],
	  },
},




- Interactive.pm

It is the module that implement the interactive feature using the Term::ShellUI perl module
It uses the objects definitions to expand a command tree with the possible actions and required parameters

The expanssion is done using the object '$Objects::Zcli' as template and creating the '$Env::Zcli_cmd_st' command struct.

The functions used follow the following order:

-> reloadCmdStruct
-> createZcliCmd
-> createCmdObject add_ids(recursively) create a temporality description using 'create_description'
-> gen_act:
	|-> $def->{ args } = create_description
	|-> $def->{ args } = completeArgsBodyParams(): parsing te arguments autocompleting the parameters names and values
	|					  |-> listParams(): Do a ZAPI request without parameters to get the list of possible body parameters
	|-> $def->{ proc } = subrutine that executes the ZAPI action



##############################################################################
# Packager
##############################################################################

## CPAN deps:
cpan install pp JSON Term::Shell Hash::Merge LWP::Protocol::Https Term::ShellUI Config::Tiny IO:Socket:Ssl


##############################################################################

## Generate the packet:

# doc: https://metacpan.org/pod/pp

# From the root repo directory, execute:
pp -c -m -x -I src/ -M ZCLI::Define -M ZCLI::Lib -M ZCLI::Objects -o zcli.exe src/zcli.pl


##############################################################################

## Windows:

doc:
https://stackoverflow.com/questions/8055063/how-to-install-pp-par-packager

Requisitos:
- Install Strawberry Perl for windows (I installed strawberry-perl-5.16.3.1-64bit.msi)
- El binario debe acabar en .exe: "zcli.exe"
completeArgsBodyParams